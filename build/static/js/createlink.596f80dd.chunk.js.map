{"version":3,"sources":["API/api.js","components/Contributors/Contributors.tsx","components/CardLink/CardLink.tsx","components/CardIcon/CardIcon.tsx","components/CardList/CardList.tsx","components/ColorPicker/ColorPicker.tsx","components/ModalContent/ModalContent.tsx","pages/CreateLinkPage/CreateLinkPage.tsx","pages/Redirect/Redirect.tsx"],"names":["getOwner","owner","axios","get","getOwnerRepo","repo","getContributors","getShortURL","longURL","checkTinyURL","tinyHash","defaults","baseURL","useStyles","makeStyles","accordion","background","boxShadow","display","margin","accordionSummary","padding","minHeight","height","Contributors","contributors","classes","Accordion","className","AccordionSummary","expandIcon","Typography","AccordionDetails","Grid","container","direction","map","contributor","index","item","memo","theme","card","width","spacing","borderRadius","desc","flexDirection","justifyContent","CardLink","color","icon","enqueueSnackbar","useSnackbar","useState","repoAuthor","setRepoAuthor","repoName","setRepoName","repoDescription","setRepoDescription","starsAmount","setStarsAmount","setContributors","getContributorList","useRef","a","data","login","slice","variant","fetchData","useCallback","name","description","stargazers_count","message","useEffect","current","SelectedIcon","icons","Card","style","size","selectedIcon","CardIcon","children","onClick","iconName","handleOnClick","root","overflowX","marginBottom","CardList","handleOnClickIconCard","iconsNames","useMemo","Object","keys","Paper","wrap","CurrentIcon","colorButton","backdrop","zIndex","position","top","right","bottom","left","ColorPicker","handleChangeComplete","showColorPicker","setShowColorPicker","colorButtonRef","setLeft","setTop","toggleShowColorPicker","getBoundingClientRect","clientHeight","prev","hideColorPicker","e","target","currentTarget","Button","ref","fullWidth","Box","disableAlpha","onChangeComplete","transform","copyInput","cursor","caretColor","textOverflow","mb","ModalContent","link","handleCopyInputTextToClipboard","navigator","clipboard","writeText","then","catch","handlePressKeyToCopyInputTextToClipboard","key","TextField","value","onKeyDown","InputProps","startAdornment","InputAdornment","createLinkButton","textField","backgroundColor","CreateLinkPage","setOwner","isOwnerExists","setIsOwnerExists","handleOwnerChange","useDebounce","debouncedOwner","checkIfOwnerExists","Error","setRepo","isRepoExists","setIsRepoExists","handleRepoChange","debouncedRepo","checkIfRepoExists","setColor","hex","setIcon","isOpenModal","setIsOpenModal","toggleOpenModal","linkURL","setLinkURL","handleCreateLink","window","location","origin","queryParams","encodedQueryParams","btoa","longLinkURL","tinyURL","URL","tinyPathname","pathname","shortLinkURL","isCreateLinkButtonDisabled","p","alignItems","xs","label","onChange","disabled","Modal","open","onClose","RedirectPage","shorthash","useParams","existsTinyURL","setExistsTinyURL","checkIfExistsTinyURL","errorMessage","includes","assign","to"],"mappings":"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","file":"static/js/createlink.596f80dd.chunk.js","sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.github.com';\n\nexport function getOwner (owner) {\n    return axios.get(`users/${owner}`);\n}\n\nexport function getOwnerRepo(owner, repo) {\n    return axios.get(`repos/${owner}/${repo}`);\n}\n\nexport function getContributors(owner, repo) {\n    return axios.get(`repos/${owner}/${repo}/contributors`);\n}\n\nexport function getShortURL(longURL) {\n    return axios.get(`https://tinyurl.com/api-create.php?url=${longURL}`)\n}\n\nexport function checkTinyURL(tinyHash) {\n    return axios.get(`https://tinyurl.com/${tinyHash}`)\n}","import React, { FC, memo } from 'react';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n    accordion: {\n    background: 'inherit',\n    boxShadow: 'none',\n    '&:before': {\n      display: 'none',\n    },\n    '&.Mui-expanded': {\n        margin: 0,\n      }\n  },\n  accordionSummary: {\n      display: 'inline-flex',\n      padding: 0,\n      minHeight: 0,\n      height: 20,\n      '&.Mui-expanded': {\n        minHeight: 0,\n      },\n      '& .MuiIconButton-root': {\n        padding: 0,\n      },\n  }\n}));\n\ninterface ContributorsProps {\n    contributors: string[];\n}\n\nconst Contributors: FC<ContributorsProps> = ({ contributors }) => {\n  const classes = useStyles();\n\n  return (\n    <Accordion className={classes.accordion}>\n      <AccordionSummary className={classes.accordionSummary} expandIcon={<ExpandMoreIcon />}>\n        <Typography>Contributors</Typography>\n      </AccordionSummary>\n      <AccordionDetails>\n        <Grid container direction=\"column\">\n          {contributors.map((contributor, index) => (\n            <Grid item key={contributor}>\n                <Typography>{`${index + 1} ${contributor}`}</Typography>\n            </Grid>\n          ))}\n        </Grid>\n      </AccordionDetails>\n    </Accordion>\n  );\n}\n\nexport default memo(Contributors);\n","import { FC, useState, useEffect, useCallback, useRef } from 'react'\nimport { useSnackbar } from 'notistack'\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport * as icons from 'react-icons/ai'\nimport { getOwnerRepo, getContributors } from '../../API/api'\nimport { IContributor } from '../../interfaces'\nimport Contributors from '../Contributors'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  card: {\n    width: 400,\n    padding: theme.spacing(4),\n    borderRadius: theme.spacing(3),\n  },\n  desc: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n}));\n\ninterface CardLinkProps {\n    color: string;\n    owner: string;\n    repo: string;\n    icon: string;\n}\n\nconst CardLink: FC<CardLinkProps> = ({ color, owner, repo, icon }) => {\n    const classes = useStyles();\n    const { enqueueSnackbar } = useSnackbar();\n\n    const [repoAuthor, setRepoAuthor] = useState<string>('')\n    const [repoName, setRepoName] = useState<string>('')\n    const [repoDescription, setRepoDescription] = useState<string>('')\n    const [starsAmount, setStarsAmount] = useState<number | null>(null)\n\n    // ================getContributors====================\n    const [contributors, setContributors] = useState<string[]>([])\n\n    const getContributorList = useRef(async () => {\n        try {\n            const { data } = await getContributors(owner, repo)\n            const contributors = (data as IContributor[]).map(({ login }) => login).slice(0, 10)\n            setContributors(contributors)\n        } catch (e) {\n            enqueueSnackbar('Can\\'t get contributors', { variant: \"warning\"})\n        }\n    })\n    // ====================================\n\n    const fetchData = useCallback(\n        async () => {\n            try {\n                const {data} = await getOwnerRepo(owner, repo)\n                setRepoAuthor(data.owner.login)\n                setRepoName(data.name)\n                setRepoDescription(data.description)\n                setStarsAmount(data.stargazers_count)\n            } catch (e) {\n                enqueueSnackbar(`Author or repository with these names does not exist. ${(e as Error).message}`, { variant: \"error\"})\n            }\n        },\n        [owner, repo, enqueueSnackbar],\n    )\n\n    useEffect(() => {\n        fetchData()\n        getContributorList.current()\n    }, [fetchData])\n\n    const SelectedIcon = icons[icon as keyof typeof icons]\n\n    return (\n        <Card className={classes.card} style={{background: color}}>\n            <Grid container spacing={2}>\n                <Grid item>\n                    <SelectedIcon size=\"8em\" />\n                </Grid>\n                <Grid item className={classes.desc}>\n                    <Typography>Author: {repoAuthor}</Typography>\n                    <Typography>Repository: {repoName}</Typography>\n                    <Typography>Description: {repoDescription || 'no description'}</Typography>\n                    <Typography>Stars: {starsAmount}</Typography>\n                    <Contributors contributors={contributors} />\n                </Grid>\n            </Grid>\n        </Card>\n    )\n}\n\nexport default CardLink","import { useRef, FC, ReactNode, memo } from 'react'\nimport Card from '@material-ui/core/Card'\nimport Grid from '@material-ui/core/Grid'\nimport { makeStyles, Theme } from '@material-ui/core/styles';\n\ninterface CardIconProps {\n    children: ReactNode;\n    onClick: (iconName: string) => void;\n    iconName: string;\n    selectedIcon: boolean;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  card: {\n    padding: theme.spacing(1),\n    height: 60,\n    width: 60,\n    '&:hover': {\n        background: '#B6F3ED',\n    }\n    },\n    margin: {\n    margin: theme.spacing(1),\n  },\n  selectedIcon: {\n    background: '#B6F3ED',\n  }\n}));\n\nconst CardIcon: FC<CardIconProps> = ({ children, onClick, iconName, selectedIcon }) => {\n    const classes = useStyles();\n    const handleOnClick = useRef(() => onClick(iconName))\n\n    return (\n        <Grid item className={classes.margin}>\n            <Card\n                className={`${classes.card} ${selectedIcon && classes.selectedIcon}`}\n                onClick={handleOnClick.current}\n            >\n                <Grid container justifyContent=\"center\">\n                    {children}\n                </Grid>\n            </Card>\n        </Grid>\n    )\n}\n\nexport default memo(CardIcon)","import { FC, useMemo, memo } from 'react'\nimport * as icons from 'react-icons/ai'\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport CardIcon from '../CardIcon'\n\ninterface CardListProps {\n    selectedIcon: string;\n    handleOnClickIconCard: (iconName: string) => void;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        width: '100%',\n        overflowX: 'auto',\n        marginBottom: theme.spacing(2),\n    },\n}));\n\nconst CardList: FC<CardListProps> = ({ selectedIcon, handleOnClickIconCard }) => {\n    const classes = useStyles();\n    const iconsNames = useMemo(() => {\n        const iconsArray = Object.keys(icons) as Array<keyof typeof icons>\n        return iconsArray.slice(0, 50)\n    }, [])\n    return (\n        <>\n            <Typography>Choose icon</Typography>\n            <Paper className={classes.root}>\n                <Grid container wrap=\"nowrap\">\n                    {iconsNames.map(iconName => {\n                        const CurrentIcon = icons[iconName]\n                        return (\n                            <CardIcon\n                                key={iconName}\n                                selectedIcon={selectedIcon === iconName}\n                                iconName={iconName}\n                                onClick={handleOnClickIconCard}>\n                                    <CurrentIcon size=\"4em\" />\n                            </CardIcon>\n                        )\n                    })}\n                </Grid>\n            </Paper>\n        </>\n    )\n}\n\nexport default memo(CardList)","import { FC, useRef, useState, useCallback, MouseEvent } from 'react'\nimport { ChromePicker } from 'react-color'\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  marginBottom: {\n    marginBottom: theme.spacing(2),\n  },\n  colorButton: {\n    height: 50,\n  },\n  backdrop: {\n      zIndex: 2,\n    position: 'fixed',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n  },\n}));\n\ninterface ColorPickerProps {\n    color: string,\n    handleChangeComplete: (color: any) => void,\n}\n\nconst ColorPicker: FC<ColorPickerProps> = ({ color, handleChangeComplete}) => {\n    const classes = useStyles();\n\n    const [showColorPicker, setShowColorPicker] = useState<boolean>(false)\n    const colorButtonRef = useRef<HTMLButtonElement>(null)\n    const [left, setLeft] = useState<number>(0)\n    const [top, setTop] = useState<number>(0)\n\n    const toggleShowColorPicker = useCallback(() => {\n        if (colorButtonRef?.current) {\n            const { left, top } = colorButtonRef.current.getBoundingClientRect();\n            setTop(top + colorButtonRef.current.clientHeight)\n            setLeft(left)\n        }\n        setShowColorPicker((prev) => !prev)\n    }, [colorButtonRef])\n\n    const hideColorPicker = useRef((e: MouseEvent) => {\n        if (e.target === e.currentTarget) {\n            setShowColorPicker((prev) => !prev)\n        }\n    })\n\n    return (\n        <Grid item className={classes.marginBottom}>\n            <Button\n                ref={colorButtonRef}\n                onClick={toggleShowColorPicker}\n                variant=\"contained\"\n                style={{ background: color }}\n                className={classes.colorButton}\n                fullWidth\n            >\n                Pick Color\n            </Button>\n            {showColorPicker && (\n                <Box className={classes.backdrop} onClick={hideColorPicker.current}>\n                    <Box style={{left, top, position: \"absolute\"}}>\n                        <ChromePicker\n                            disableAlpha\n                            color={color}\n                            onChangeComplete={handleChangeComplete}\n                        />\n                    </Box>\n                </Box>\n            )}\n        </Grid>\n    )\n}\n\nexport default ColorPicker","import { FC, useRef, KeyboardEvent } from 'react'\nimport { useSnackbar } from 'notistack'\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport CardLink from '../CardLink'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    padding: theme.spacing(4),\n    borderRadius: theme.spacing(3),\n  },\n  copyInput: {\n    '& input': {\n      cursor: 'pointer',\n      caretColor: 'transparent',\n      textOverflow: 'ellipsis',\n    },\n    marginBottom: theme.spacing(4),\n  },\n  mb: {\n      marginBottom: theme.spacing(1),\n  },\n}));\n\ninterface ModalContentProps {\n    color: string;\n    owner: string;\n    repo: string;\n    icon: string;\n    link: string;\n}\n\nconst ModalContent: FC<ModalContentProps> = ({ color, owner, repo, icon, link }) => {\n    const classes = useStyles();\n    const { enqueueSnackbar } = useSnackbar()\n\n    // =====copy to clipboard handle & on press key Enter=====\n    const { current: handleCopyInputTextToClipboard } = useRef(() => {\n      navigator.clipboard\n        .writeText(link)\n        .then(() => enqueueSnackbar('Link is copied to clipboard', { variant: \"success\" }))\n        .catch(() => enqueueSnackbar('Link is not copied to clipboard. Try again, please.', { variant: \"error\" }))\n    });\n\n  const { current: handlePressKeyToCopyInputTextToClipboard } = useRef((e: KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleCopyInputTextToClipboard();\n    }\n  });\n  // =======================================================\n\n    return (\n        <Card className={classes.root}>\n            <Grid container direction=\"column\">\n                <Typography variant=\"subtitle2\" className={classes.mb}>Share this link in social networks</Typography>\n                <TextField\n                    value={link}\n                    onClick={handleCopyInputTextToClipboard}\n                    onKeyDown={handlePressKeyToCopyInputTextToClipboard}\n                    fullWidth\n                    variant=\"outlined\"\n                    className={classes.copyInput}\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <FileCopy />\n                        </InputAdornment>\n                      ),\n                    }}\n                />\n                <Typography variant=\"subtitle2\" className={classes.mb}>Card preview</Typography>\n                <CardLink\n                    color={color}\n                    owner={owner}\n                    repo={repo}\n                    icon={icon}\n                />\n            </Grid>\n        </Card>\n    )\n}\n\nexport default ModalContent","import { ChangeEvent, FC, useEffect, useState, useRef, useCallback } from 'react'\nimport { useSnackbar } from 'notistack'\nimport { useDebounce } from 'use-debounce';\n\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Modal from '@material-ui/core/Modal';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport CardList from '../../components/CardList'\nimport ColorPicker from '../../components/ColorPicker'\nimport ModalContent from '../../components/ModalContent'\nimport { getOwner, getOwnerRepo, getShortURL } from '../../API/api'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        borderRadius: theme.spacing(2),\n        padding: theme.spacing(2),\n        width: 400,\n        background: '#F3F3F3',\n    },\n    marginBottom: {\n      marginBottom: theme.spacing(2),\n    },\n    margin: {\n      margin: theme.spacing(1),\n      },\n    createLinkButton: {\n      height: 50,\n    },\n    textField: {\n        background: 'white',\n        '& .MuiInputBase-input.Mui-disabled': {\n            backgroundColor: 'rgba(0, 0, 0, 0.12)',\n        }\n    }\n}));\n\nconst CreateLinkPage: FC = () => {\n    const classes = useStyles();\n    const { enqueueSnackbar } = useSnackbar();\n\n    // =========Owner============\n    const [owner, setOwner] = useState<string>('')\n    const [isOwnerExists, setIsOwnerExists] = useState<boolean>(false)\n    const handleOwnerChange = useRef((e: ChangeEvent<HTMLInputElement>) => setOwner(e.target.value))\n\n    const [debouncedOwner] = useDebounce(owner, 500);\n\n    const checkIfOwnerExists = useRef(async (debouncedOwner: string) => {\n        try {\n            const { data } = await getOwner(debouncedOwner)\n            if (data.login !== debouncedOwner) {\n                throw Error(`Author ${debouncedOwner} does not exists on GitHub`)\n            }\n            setIsOwnerExists(true)\n        } catch (e) {\n            setIsOwnerExists(false)\n            enqueueSnackbar(`Author ${debouncedOwner} does not exists on GitHub`, { variant: \"warning\"})\n        }\n    })\n\n    useEffect(() => {\n        if (debouncedOwner) {\n            checkIfOwnerExists.current(debouncedOwner)\n        }\n    }, [debouncedOwner])\n    // ====================================\n\n    // =========Repository============\n    const [repo, setRepo] = useState<string>('')\n    const [isRepoExists, setIsRepoExists] = useState(false)\n    const handleRepoChange = useRef((e: ChangeEvent<HTMLInputElement>) => setRepo(e.target.value))\n\n    const [debouncedRepo] = useDebounce(repo, 1000);\n\n    const checkIfRepoExists = useRef(async (debouncedOwner: string, debouncedRepo: string) => {\n        try {\n            const { data } = await getOwnerRepo(debouncedOwner, debouncedRepo)\n            if (data.name !== debouncedRepo) {\n                throw Error(`Repository ${debouncedRepo} does not exists`)\n            }\n            setIsRepoExists(true)\n        } catch (e) {\n            setIsRepoExists(false)\n            enqueueSnackbar(`Repository ${debouncedRepo} does not exists`, { variant: \"warning\"})\n        }\n    })\n\n    useEffect(() => {\n        if (debouncedOwner && debouncedRepo) {\n            checkIfRepoExists.current(debouncedOwner, debouncedRepo)\n        }\n    }, [debouncedOwner, debouncedRepo])\n\n    // ====================================\n\n    // ==============ColorPicker======================\n    const [color, setColor] = useState<string>('#fff')\n    const handleChangeComplete = useRef((color: any) => setColor(color.hex))\n    // ======================================\n\n    // =================Icon=====================\n    const [icon, setIcon] = useState<string>('')\n    const handleOnClickIconCard = useRef((iconName: string) => setIcon(iconName))\n\n    // ======================================\n\n    // ================Modal======================\n    const [isOpenModal, setIsOpenModal] = useState(false)\n    const toggleOpenModal = useRef(() => setIsOpenModal(prev => !prev))\n    // ======================================\n\n    const [linkURL, setLinkURL] = useState<string>('')\n\n    const handleCreateLink = useCallback(async () => {\n        const baseURL = window.location.origin\n        const queryParams = `?owner=${owner}&repo=${repo}&color=${color}&icon=${icon}`\n        const encodedQueryParams = btoa(queryParams);\n        const longLinkURL = `${baseURL}/card/${encodedQueryParams}`\n        const { data: tinyURL } = await getShortURL(longLinkURL)\n        const { pathname: tinyPathname } = new URL(tinyURL)\n        const shortLinkURL = `${baseURL}${tinyPathname}`\n        setLinkURL(shortLinkURL)\n        toggleOpenModal.current()\n        },\n        [color, owner, repo, icon],\n    )\n\n    const isCreateLinkButtonDisabled = !isOwnerExists || !isRepoExists || !icon\n\n    return (\n        <Box p={4}>\n            <Grid\n                container\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Grid\n                    item\n                    container\n                    direction=\"column\"\n                    className={classes.root}\n                >\n                    <Grid item container justifyContent=\"center\">\n                        <Typography className={classes.marginBottom}>\n                            Create link for github repository\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} className={classes.marginBottom}>\n                        <TextField\n                            fullWidth\n                            label=\"Author\"\n                            value={owner}\n                            onChange={handleOwnerChange.current}\n                            variant=\"outlined\"\n                            size=\"small\"\n                            className={classes.textField}\n                        />\n                    </Grid>\n                    <Grid item xs={12} className={classes.marginBottom}>\n                        <TextField\n                            fullWidth\n                            label=\"Repository\"\n                            value={repo}\n                            onChange={handleRepoChange.current}\n                            variant=\"outlined\"\n                            size=\"small\"\n                            disabled={!isOwnerExists || !owner}\n                            className={classes.textField}\n                        />\n                    </Grid>\n                    <ColorPicker\n                        color={color}\n                        handleChangeComplete={handleChangeComplete.current}\n                    />\n                    <CardList\n                        selectedIcon={icon}\n                        handleOnClickIconCard={handleOnClickIconCard.current}\n                    />\n                    <Grid item className={classes.marginBottom}>\n                        <Button\n                            onClick={handleCreateLink}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            disabled={isCreateLinkButtonDisabled}\n                            className={classes.createLinkButton}\n                            fullWidth\n                        >\n                            Create Link\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Modal\n                open={isOpenModal}\n                onClose={toggleOpenModal.current}\n            >\n                <ModalContent\n                    color={color}\n                    owner={owner}\n                    repo={repo}\n                    icon={icon}\n                    link={linkURL}\n                />\n            </Modal>\n        </Box>\n    )\n}\n\nexport default CreateLinkPage;","import { FC, useState, useEffect, useCallback } from 'react'\nimport { Redirect, useParams } from 'react-router-dom';\nimport { checkTinyURL } from '../../API/api'\n\ninterface Params {\n    shorthash: string,\n}\n\nconst RedirectPage: FC = () => {\n    const { shorthash } = useParams<Params>()\n    const [existsTinyURL, setExistsTinyURL] = useState<boolean>(true)\n\n    const checkIfExistsTinyURL = useCallback(async () => {\n        try {\n            await checkTinyURL(shorthash)\n        } catch (error) {\n            const errorMessage = (error as Error).message\n            const isTinyURL = !errorMessage.includes('404')\n            if (isTinyURL) {\n                window.location.assign(`https://tinyurl.com/${shorthash}`)\n                return\n            }\n            setExistsTinyURL(false)\n        }\n    }, [shorthash])\n\n    useEffect(() => {\n        checkIfExistsTinyURL()\n    }, [checkIfExistsTinyURL])\n    return (\n        <>\n            {!existsTinyURL && <Redirect to=\"/\" />}\n        </>\n    )\n}\n\nexport default RedirectPage;"],"sourceRoot":""}